1.Min Stack

2.Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

3.Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2


1.用现成的方法实现
public class MinStack {

     private Stack<int> stack = new Stack<int>();
        private Stack<int> helper = new Stack<int>();
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void Push(int x) {
           stack.Push(x);
            helper.Push(helper.Count == 0 ? x : Math.Min(x, helper.Peek()));
    }
    
    public void Pop() {
          stack.Pop();
            helper.Pop();
    }
    
    public int Top() {
        return stack.Peek(); 
    }
    
    public int GetMin() {
         return helper.Peek(); 
    }
}

第2种

 public class MinStack
    {


        private int min;
        /** 第一次push改变状态，pop完所有元素改变状态 */
        private bool minflag = false;
        private int[] stack;

        private int index = -1;

        public MinStack()
        {
            stack = new int[10];
        }

        public void push(int x)
        {
            // 确保容量体积
            if(index>=stack.Length-1)
            {
                int[] newStack = new int[stack.Length * 2];
                 Array.Copy(stack, 0, newStack, 0, stack.Length);
                stack = newStack;
            }
            index++;
            stack[index] = x;
            // 设置最小值
            if(!minflag)
            {
                minflag = true;
                min = x;
            } else
            {
                if (x < min)
                    min = x;
            }
        }

        public void pop()
        {
            if (index > 0 && stack[index] == min)
            {
                min = stack[0];
                for (int i = 0; i <= index - 1; i++)
                {
                    if (stack[i] < min)
                    {
                        min = stack[i];
                    }
                }
            }

            index--;
            if (index < 0)
            {
                index = -1;
                min = 0;
                minflag = false;
                //至此，最小值需要重新初始化
            }
        }

        public int top()
        {
            return index < 0 ? 0 : stack[index];
        }


        /**
         * 常数时间
         *
         * @return
         */
        public int getMin()
        {
            return min;
        }
    }
