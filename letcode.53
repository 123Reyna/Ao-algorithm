1.Maximum Subarray
2.Given an integer array nums, find the contiguous(相邻的) subarray (containing at least one number) which has the largest sum and return its sum.
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach(征服), which is more subtle(微妙的,机智的).
如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解


Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [0]
Output: 0
Example 4:

Input: nums = [-1]
Output: -1
Example 5:

Input: nums = [-2147483647]
Output: -2147483647

solution
1.动态规划（简单点说就是将大问题划分为小问题）

public class Solution {
    public int MaxSubArray(int[] nums) {
        int len=nums.Length;
        if(len==0) return 0;
        if(len==1) return nums[0];
       int[] dp=new int[len];
        
        dp[0]=nums[0];
        int max_num=dp[0];
        int i=1;
        for(;i<len;i++){
            if(dp[i-1]>0)
                dp[i]=dp[i-1]+nums[i];
            else 
                dp[i]=nums[i];
            max_num=Math.Max(dp[i],max_num);
        }
        return max_num;
    }
}


2.分治法
